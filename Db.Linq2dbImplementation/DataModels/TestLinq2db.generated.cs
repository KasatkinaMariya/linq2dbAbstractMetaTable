//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace Db.Linq2dbImplementation.DataModels
{
	/// <summary>
	/// Database       : test_linq2db
	/// Data Source    : tcp://localhost:5432
	/// Server Version : 9.6.3
	/// </summary>
	public partial class TestContext : LinqToDB.Data.DataConnection
	{
		public ITable<EntityA>     EntityA     { get { return this.GetTable<EntityA>(); } }
		public ITable<EntityB>     EntityB     { get { return this.GetTable<EntityB>(); } }
		public ITable<LinkEntityA> LinkEntityA { get { return this.GetTable<LinkEntityA>(); } }
		public ITable<LinkEntityB> LinkEntityB { get { return this.GetTable<LinkEntityB>(); } }
		public ITable<SomeObject>  SomeObjects { get { return this.GetTable<SomeObject>(); } }

		public TestContext()
			: base("Postgres")
		{
			InitDataContext();
		}

		public TestContext(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	[Table(Schema="public", Name="EntityA")]
	public partial class EntityA
	{
		[PrimaryKey, NotNull] public Guid   Id     { get; set; } // uuid
		[Column,     NotNull] public string PropA1 { get; set; } // character varying
		[Column,     NotNull] public bool   PropA2 { get; set; } // boolean

		#region Associations

		/// <summary>
		/// LinkEntityA_EntityId_fkey_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="EntityId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<LinkEntityA> LinkEntityAEntityIdfkeys { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="EntityB")]
	public partial class EntityB
	{
		[PrimaryKey, NotNull] public Guid    Id     { get; set; } // uuid
		[Column,     NotNull] public decimal PropB1 { get; set; } // numeric(4,2)
		[Column,     NotNull] public decimal PropB2 { get; set; } // numeric(4,2)

		#region Associations

		/// <summary>
		/// LinkEntityB_EntityId_fkey_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="EntityId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<LinkEntityB> LinkEntityBEntityIdfkeys { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="LinkEntityA")]
	public partial class LinkEntityA
	{
        /*
		[PrimaryKey, Identity] public int            Id                  { get; set; } // integer
		[Column,     NotNull ] public Guid           EntityId            { get; set; } // uuid
		[Column,     NotNull ] public Guid           LinkedObjectId      { get; set; } // uuid
		[Column,     NotNull ] public DateTimeOffset LastAccessTimestamp { get; set; } // timestamp (6) with time zone
		[Column,     NotNull ] public EntityType     EntityType          { get; set; } // smallint
        */
		#region Associations

		/// <summary>
		/// LinkEntityA_EntityId_fkey
		/// </summary>
		[Association(ThisKey="EntityId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="LinkEntityA_EntityId_fkey", BackReferenceName="LinkEntityAEntityIdfkeys")]
		public EntityA EntityIdfkey { get; set; }

		/// <summary>
		/// LinkEntityA_LinkedObjectId_fkey
		/// </summary>
		[Association(ThisKey="LinkedObjectId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="LinkEntityA_LinkedObjectId_fkey", BackReferenceName="LinkEntityALinkedObjectIdfkeys")]
		public SomeObject LinkedObjectIdfkey { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="LinkEntityB")]
	public partial class LinkEntityB
	{
        /*
		[PrimaryKey, Identity] public int            Id                  { get; set; } // integer
		[Column,     NotNull ] public Guid           EntityId            { get; set; } // uuid
		[Column,     NotNull ] public Guid           LinkedObjectId      { get; set; } // uuid
		[Column,     NotNull ] public DateTimeOffset LastAccessTimestamp { get; set; } // timestamp (6) with time zone
		[Column,     NotNull ] public EntityType     EntityType          { get; set; } // smallint
        */
		#region Associations

		/// <summary>
		/// LinkEntityB_EntityId_fkey
		/// </summary>
		[Association(ThisKey="EntityId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="LinkEntityB_EntityId_fkey", BackReferenceName="LinkEntityBEntityIdfkeys")]
		public EntityB EntityIdfkey { get; set; }

		/// <summary>
		/// LinkEntityB_LinkedObjectId_fkey
		/// </summary>
		[Association(ThisKey="LinkedObjectId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="LinkEntityB_LinkedObjectId_fkey", BackReferenceName="LinkEntityBLinkedObjectIdfkeys")]
		public SomeObject LinkedObjectIdfkey { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="SomeObject")]
	public partial class SomeObject
	{
		[PrimaryKey, NotNull] public Guid Id { get; set; } // uuid

		#region Associations

		/// <summary>
		/// LinkEntityA_LinkedObjectId_fkey_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="LinkedObjectId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<LinkEntityA> LinkEntityALinkedObjectIdfkeys { get; set; }

		/// <summary>
		/// LinkEntityB_LinkedObjectId_fkey_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="LinkedObjectId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<LinkEntityB> LinkEntityBLinkedObjectIdfkeys { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static EntityA Find(this ITable<EntityA> table, Guid Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static EntityB Find(this ITable<EntityB> table, Guid Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static LinkEntityA Find(this ITable<LinkEntityA> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static LinkEntityB Find(this ITable<LinkEntityB> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SomeObject Find(this ITable<SomeObject> table, Guid Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}
